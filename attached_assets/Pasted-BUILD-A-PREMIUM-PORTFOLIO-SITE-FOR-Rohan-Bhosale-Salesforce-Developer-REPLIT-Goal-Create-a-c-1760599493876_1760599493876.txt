BUILD A PREMIUM PORTFOLIO SITE FOR "Rohan Bhosale — Salesforce Developer" (REPLIT)

Goal:
Create a complete, deployable Replit project (frontend + backend) that implements a premium single-page portfolio with a Services & Fixed Pricing grid and a lead intake form that persists leads and emails confirmation to the user. Follow the UI moodboard and content exactly.

Deliverables:
Create the following files and content in the repl (server + frontend):
- index.html               # single-page responsive frontend using Tailwind CDN + small custom CSS
- style.css                # additional styles for the pricing grid + glassmorphism
- server/index.js          # Express backend, POST /api/lead
- server/leadsStore.js     # small module to persist leads to data/leads.json
- data/leads.json          # initialized as an empty array []
- package.json             # dependencies and start script
- .replit                  # run command
- README.txt               # brief setup + testing instructions

Design & UI instructions (must follow):
- Use the detailed UI Moodboard:
  - Dark navy background, indigo accents, glassmorphism cards, subtle blurred radial blobs in hero.
  - Typography: modern sans (Inter/Poppins), clear hierarchy.
  - Iconography: SVG icons only (Heroicons/Lucide style) for skills, projects, and pricing cards.
  - Micro-interactions: hover lift on buttons/cards, focus rings on inputs, smooth transition easing.
  - Mobile-first responsive: single column mobile, 2-column at ≥768px for pricing and checkboxes.
- Hero: name, title, 1–2 line summary, primary CTA "Contact Me" and secondary "View Projects".
- Sections: About, Skills (expanded Salesforce skills), Projects (4 cards), Experience (single role), Services & Fixed Pricing (10 cards), Contact (form) and Footer.
- Pricing grid: use plain CSS (not Tailwind) for that grid to ensure consistent behavior. Cards must include: title, 2–4 scope bullets, price (USD), and turnaround.
- Form UX: validate on client and server; show inline errors. On success show "✅ Thanks! Rohan will reach out to you soon." and clear form. Auto-hide success after 4s.

Content (copy exactly from this prompt):
- Hero summary: "Results-driven Salesforce Developer with 3+ years of experience in Financial Services and Mortgage (LOS) solutions. Specializing in LWC, Aura, Apex, and Experience Cloud to deliver end-to-end Salesforce implementations."
- Experience role line: "Salesforce Developer — Inflooens (April 2022 – September 2025)"
- Projects with titles and brief descriptions exactly as provided in the earlier brief (Master Client Portal, 360 SMS Integration, SMS Round-Robin Assignment Engine, Mortgage Industry Integrations).
- Services & Pricing: include the 10 services with exact price and timeline:
  1) Setup & Configuration — $900 — 3–5 business days
  2) Custom Apex Feature (1 trigger + handler + tests) — $1,200 — 3–5 business days
  3) Lightning Web Component (1 reusable LWC) — $1,300 — 4–7 business days
  4) Flow Automation (moderate) — $650 — 2–4 business days
  5) API Integration (one system, moderate) — $2,200 — 7–14 business days
  6) Experience Cloud Portal (starter) — $3,000 — 10–20 business days
  7) Data Migration (up to ~100k) — $1,100 — 3–7 business days
  8) Reports & Dashboards (per dashboard) — $450 — 1–3 business days
  9) Security Health Check & Optimization — $900 — 2–5 business days
  10) Ongoing Support Pack — $1,200 / month — light care plan
- Pricing footnote: "Pricing shown in USD. Final quote confirmed after a short discovery call; complex scopes may require a custom estimate."

Backend & behavior requirements:
- Node.js + Express app with POST /api/lead that:
  - Validates payload: name, email, message required; email regex; services array at least one; honeypot must be empty.
  - Adds a timestamp and masked IP to the lead object and appends to data/leads.json (atomic write).
  - Sends a confirmation email to the client's email with subject: "Thanks — Rohan will reach out soon" and body: "Hi {name}, ✅ Thanks for reaching out. Rohan will get back to you soon..."
  - Returns JSON success/error.
  - Rate-limits submissions (e.g., 10–20 requests per minute) to avoid spam.
  - Logs errors but not full PII to stdout.

Security:
- Use honeypot field to trap bots.
- CORS: restrict to APP_ORIGIN environment variable if present.
- Do not store SMTP secrets in code—use Replit secrets (list expected env names in README).
- Ensure server-side validation duplicates client validation.

Files & metadata:
- package.json must include express, helmet, cors, nodemailer, express-rate-limit.
- .replit must run "node server/index.js".
- README should explain how to set environment variables in Replit Secrets: SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, FROM_EMAIL, APP_ORIGIN.

Testing instructions (for user):
- Start repl, open the site, submit form with at least one service selected.
- confirm leads appended to data/leads.json and confirmation email received.
- Test validation by leaving required fields blank, using invalid email, filling honeypot.

UX copy & microcopy to include in the UI (exact phrases):
- Success message: "✅ Thanks! Rohan will reach out to you soon."
- Pricing footnote (as above)
- Honeypot field name: contact_me_by_fax (hidden)

Quality requirements:
- All front-end text must match the content in this prompt (hero summary, projects, services).
- Visual polish — no placeholder boxes; use SVG icons and consistent spacing.
- Frontend must be accessible (labels, aria where applicable).

Ask the user after generation:
- "Do you want me to deploy these files to your Repl and set the SMTP secrets, or would you like guidance to add the secrets yourself?"

End of prompt.
